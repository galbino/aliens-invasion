// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/galbino/alien-assignment/internal/domain (interfaces: Cities)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCities is a mock of Cities interface.
type MockCities struct {
	ctrl     *gomock.Controller
	recorder *MockCitiesMockRecorder
}

// MockCitiesMockRecorder is the mock recorder for MockCities.
type MockCitiesMockRecorder struct {
	mock *MockCities
}

// NewMockCities creates a new mock instance.
func NewMockCities(ctrl *gomock.Controller) *MockCities {
	mock := &MockCities{ctrl: ctrl}
	mock.recorder = &MockCitiesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCities) EXPECT() *MockCitiesMockRecorder {
	return m.recorder
}

// CityConnections mocks base method.
func (m *MockCities) CityConnections(arg0 string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CityConnections", arg0)
	ret0, _ := ret[0].([]string)
	return ret0
}

// CityConnections indicates an expected call of CityConnections.
func (mr *MockCitiesMockRecorder) CityConnections(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CityConnections", reflect.TypeOf((*MockCities)(nil).CityConnections), arg0)
}

// DestroyCity mocks base method.
func (m *MockCities) DestroyCity(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DestroyCity", arg0)
}

// DestroyCity indicates an expected call of DestroyCity.
func (mr *MockCitiesMockRecorder) DestroyCity(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroyCity", reflect.TypeOf((*MockCities)(nil).DestroyCity), arg0)
}

// ListCities mocks base method.
func (m *MockCities) ListCities() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCities")
	ret0, _ := ret[0].([]string)
	return ret0
}

// ListCities indicates an expected call of ListCities.
func (mr *MockCitiesMockRecorder) ListCities() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCities", reflect.TypeOf((*MockCities)(nil).ListCities))
}

// String mocks base method.
func (m *MockCities) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockCitiesMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockCities)(nil).String))
}
