// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/galbino/alien-assignment/internal/domain (interfaces: Game)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockGame is a mock of Game interface.
type MockGame struct {
	ctrl     *gomock.Controller
	recorder *MockGameMockRecorder
}

// MockGameMockRecorder is the mock recorder for MockGame.
type MockGameMockRecorder struct {
	mock *MockGame
}

// NewMockGame creates a new mock instance.
func NewMockGame(ctrl *gomock.Controller) *MockGame {
	mock := &MockGame{ctrl: ctrl}
	mock.recorder = &MockGameMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGame) EXPECT() *MockGameMockRecorder {
	return m.recorder
}

// NewRound mocks base method.
func (m *MockGame) NewRound() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewRound")
	ret0, _ := ret[0].(bool)
	return ret0
}

// NewRound indicates an expected call of NewRound.
func (mr *MockGameMockRecorder) NewRound() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRound", reflect.TypeOf((*MockGame)(nil).NewRound))
}

// String mocks base method.
func (m *MockGame) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockGameMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockGame)(nil).String))
}
